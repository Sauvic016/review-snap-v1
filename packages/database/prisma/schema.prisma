generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  name          String
  company       String?
  createdAt     DateTime   @default(now())
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  reviews       Review[]
  sessions      Session[]
  templates     Template[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Template {
  id          String     @id @default(uuid())
  sellerId    String
  title       String
  description String?
  settings    Json
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
  reviews     Review[]
  seller      User       @relation(fields: [sellerId], references: [id])
}

model Question {
  id         String   @id @default(uuid())
  templateId String
  content    String
  order      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model Review {
  id              String     @id @default(cuid())
  templateId      String
  sellerId        String
  customerName    String
  customerEmail   String?
  customerPhoto   String?
  sociallinks     String?
  title_n_company String?
  rating          Int?
  type            ReviewType
  responses       String?
  videoUrl        String?
  videoStatus     String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  isBookMarked    Boolean
  seller          User       @relation(fields: [sellerId], references: [id])
  template        Template   @relation(fields: [templateId], references: [id])
}

enum ReviewType {
  VIDEO
  TEXT
  TEXT_AND_VIDEO
}
